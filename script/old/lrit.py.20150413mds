#!/usr/local/bin/python

import os, re, socket, struct, sys

from hexdump import hexdump

class LRIT:

  frame_sync = b'\x1a\xcf\xfc\x1d'

  def __init__( self, host, port = 4001, file = None ):
    if file is not None:
      self.mode = 'file'
      self.fd = open( file, 'rb' )
    else:
      self.mode = 'sock'
      self.sock = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
      self.sock.connect( ( host, port ) )
    self.buffer = None

  def __iter__( self ):
    return self

  def next( self ):
    if self.buffer is None:
      while True:
        if self.mode == 'file':
          chunk = bytearray( self.fd.read( 1024 ) )
        else:
          chunk = bytearray( self.sock.recv( 1024 ) )
        i = chunk.find( LRIT.frame_sync )
        if i != -1:
          self.buffer = chunk[i+4:]
          break
    while True:
      i = self.buffer.find( LRIT.frame_sync )
      if i != -1:
        frame = LRIT.frame( LRIT.frame_sync + self.buffer[:i] )
        self.buffer = self.buffer[i+4:]
        return frame
      if self.mode == 'file':
        chunk = bytearray( self.fd.read( 1024 ) )
      else:
        chunk = bytearray( self.sock.recv( 1024 ) )
      self.buffer += chunk

  #############################################################################

  class frame:
    def __init__( self, buffer ):
      size = len( buffer )
      if size != 1024:
        hexdump( str( buffer ) )
        raise ValueError( "CADU frame is %d bytes instead of 1024" % ( size ) )

      # Decode VCDU primary header

      ( vcdu1, vcdu2 ) = struct.unpack( "!HL", buffer[4:10] )
      self.version    = ( vcdu1 & 0xc000 ) >> 14
      self.spacecraft = ( vcdu1 & 0x3fc0 ) >> 6
      self.channel    =   vcdu1 & 0x003f

      self.counter    = ( vcdu2 & 0xffffff00 ) >> 8
      self.replay     = ( vcdu2 & 0x00000080 ) >> 7
      self.spare      =   vcdu2 & 0x0000007f

      # Decode M_PDU header

      self.first_header_ptr = struct.unpack( '!H', buffer[10:12] )[0] & 0x07ff 
      self.packet_zone = buffer[12:]

      if self.channel != 63:
        msg = """CADU Frame:
 Version: %3d      Counter: %8d
   Craft: %3d       Replay: %8d
 Channel: %3d  1st Hdr Ptr: %8d""" % ( self.version, self.counter,
          self.spacecraft, self.replay, self.channel, self.first_header_ptr )
        print color( msg, 'yellow' )

  #############################################################################

  class transport_file:
    def __init__( self, packet ):
      self.data = b''
      self.decode_packet( packet )

    def decode_packet( self, packet ):

      if packet.seq_first:
        ( self.file_counter, self.length ) = struct.unpack( "!HQ",
                                                            packet.data[0:10] )
        self.data = packet.data[10:]
      else:
        self.data += packet.data

      if packet.seq_last:
        print "Output file:"
        hexdump( str( self.data ) )
        
  #############################################################################

  class packet:
    def __init__( self, data ):
      self.version = None
      self.buffer = b''
      print "NEW LRIT PACKET"
      datalen = len( data )
      if datalen > 5:
	self.decode_header( data )
	if self.length + 6 >= datalen:
	  self.finalize( data[:self.length+6] )
      else:
	self.buffer = data

    def add_frame( self, data ):
      self.buffer += data

    def decode_header( self, header ):
      ( id, seq, len ) = struct.unpack( "!HHH", header[0:6] )
      self.version        = ( id & 0xe000 ) >> 13
      self.type           = ( id & 0x1000 ) >> 12
      self.secondary_flag = ( id & 0x0800 ) >> 11
      self.apid           =   id & 0x07ff
      self.seq_first      = ( seq & 0x8000 ) >> 15
      self.seq_last       = ( seq & 0x4000 ) >> 14
      self.seq_ctr        =   seq & 0x3fff
      self.length         =   len
      msg = """LRIT Packet:
     Version: %4d   First?: %5d
        Type: %4d    Last?: %5d
 2ndary Flag: %4d  Counter: %5d
        APID: %4d   Length: %5d""" % ( self.version, self.seq_first,
        self.type, self.seq_last, self.secondary_flag, self.seq_ctr,
        self.apid, self.length )
      print color( msg, 'blue' )

    def finalize( self, data ):
      self.buffer += data
      if self.version is None: self.decode_header( data )
      self.data = self.buffer[6:-2]          # trim off header and CRC
      self.buffer = b''

  #############################################################################

  class channel:
    def __init__( self ):
      self.packet = None
      self.apids = {}

    def add_frame( self, data ):
      if self.packet is None:
        self.packet = LRIT.packet( data )
      else:
        self.packet.add_frame( data )

    def finalize_packet( self, data ):
      if self.packet is None:            # End of ungathered packet, drop it
        return None
      self.packet.finalize( data )
      apid = self.packet.apid
      if apid in self.apids:
        self.apids[apid].decode_packet( self.packet )
      else:
        self.apids[apid] = LRIT.transport_file( self.packet )
      self.packet = None

###############################################################################

color_map = {   'blue': '\33[44m\33[97m',
               'green': '\33[42m\33[97m',
              'yellow': '\33[43m\33[30m',
                 'red': '\33[41m\33[97m' }

def color( text, color ):
  return '%s%s\33[39m\33[49m' % ( color_map[color], text )

if __name__ == '__main__':
  channel = []
  for chan in range( 64 ):
    channel.append( LRIT.channel() )
  
  #for frame in LRIT( '137.161.185.231' ):
  for frame in LRIT( '137.161.185.231', 4001, 'rawdata.lrit' ):
    chan = channel[frame.channel]
    fhp = frame.first_header_ptr
    if fhp == 2047:
      chan.add_frame( frame.packet_zone )
      continue;
    elif fhp != 0:
      chan.finalize_packet( frame.packet_zone[:fhp] )
    chan.add_frame( frame.packet_zone[fhp:] )
